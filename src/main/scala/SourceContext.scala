package org.scala_lang.virtualized

import scala.reflect.macros.blackbox.Context
import scala.language.experimental.macros

/** A SourceContext is a descriptor for the invocation of a method that takes
 *  an implicit parameter of type SourceContext. It provides information about the
 *  location in the source where the method is invoked, such as the source file name
 *  and line number.
 */
trait SourceContext extends SourceLocation {

  var parent: Option[SourceContext] = None

  def path: String //full path, fileName only contains Name

  def update(context: SourceContext): SourceContext

  def bindings: List[(String, Int)]

  def assignedVariable: Option[String] =
    if (bindings(0)._1 == null) None //TODO should this rather be "bindings == Nil"?
    else Some(bindings(0)._1)

  def methodName: String

  def receiver: Option[String]

  def allContexts: List[List[(String, Int)]]

  override def toString = if (SourceContext.debug) {
    "SourceContext at " + methodName + ":\n// " +
    "Assigning to: " + assignedVariable + "\n// " +
    "SourceLocation: " + super.toString + "\n// " +
    "Parent: " +
    (if (parent.isEmpty) "None" else "\n// " + parent.get.toString)
  } else
    super.toString
}

//using the available information from the macro Context, rebuild the SourceContext previously generated by the compiler
class SourceContextMacro(val c: Context) {
  import c.universe._
  def impl: c.Expr[SourceContext] = {
    val pos:Position = c.enclosingPosition
    val path = pos.source.path
    val filename = pos.source.file.name
    val line = pos.line
    //pos.point seems to be the overall character offset of all the characters in the file
    val column = pos.column
//    val charOffset = mapExtra(pos.point)(new String(pos.source.file.toCharArray).split("\n").toList)//pos.column is always 0, pos.point has wrong values
    val methodName = "no method name available" //c.enclosingMethod is empty...
    //val receiver =
    //TODO: what is bindings supposed to contain??
    val bindings = List(("line",line),("column",column)) //aka: sourceInfo
    c.Expr( q"""SourceContext($path, $filename, $methodName, $bindings)""")
  }

  //calculate the offset in the corresponding line not the overall file!
  def mapExtra(i: Int)(l:List[String]): Int = l match { //we already know the line so we can discard this information
    case Nil => -1 //offset is out of the range of
    case x :: xs =>
      if (x.length >= i) i
      else mapExtra(i-x.length-1)(xs) //"-1" for single line break character
  }
}

object SourceContext {

  var debug = false

  implicit def _sc: SourceContext = macro SourceContextMacro.impl

  def apply(name: String, sourceInfo: List[(String, Int)]): SourceContext =
    apply("<unknown path>", "<unknown file>", name, sourceInfo)

  def apply(path:String, fileName: String, name: String, sourceInfo: List[(String, Int)]): SourceContext =
    new ConcreteSourceContext(path, fileName, name, sourceInfo)

  def apply(path:String, fileName: String, name: String, receiver: String, sourceInfo: List[(String, Int)]): SourceContext =
    new ConcreteSourceContext(path, fileName, name, Some(receiver), sourceInfo)

  private class ConcreteSourceContext(val path:String,
                                      override val fileName: String,
                                      val methodName: String,
                                      val receiver: Option[String],
                                      val bindings: List[(String, Int)])
  extends SourceContext {

    def this(path:String, file: String, method: String, bs: List[(String, Int)]) =
      this(path, file, method, None, bs)

    def line = bindings(0)._2
    override def charOffset = bindings(1)._2 //I don't know how to do this

    def update(context: SourceContext): SourceContext = {
      context.parent = Some(this)
      context
    }

    def allContexts = {
      var contexts: List[List[(String, Int)]] = List()
      var curr: SourceContext = this
      contexts = contexts ::: List(curr.bindings)
      while (!curr.parent.isEmpty) {
        curr = curr.parent.get
        contexts = contexts ::: List(curr.bindings)
      }
      contexts
    }
  }
}
