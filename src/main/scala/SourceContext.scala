package org.scala_lang.virtualized

import scala.reflect.macros.blackbox.Context
import scala.language.experimental.macros


/** A SourceContext is a descriptor for the invocation of a method that takes
 *  an implicit parameter of type SourceContext. It provides information about the
 *  location in the source where the method is invoked, such as the source file name
 *  and line number.
 */

trait SourceContext {

  /** The full path of the source file of the calling location 
   */
  def path: String

  /** The name of the source file of the calling location
   */
  def fileName: String

  /** The line number of the calling location
   */
  def line: Int

  /** The column of the calling location
   */
  def column: Int

  /** The name of the method being called  
   */
  def methodName: String

  /** The name of the value / variable instantiated to hold the result of the method 
   */
  def assignedVariable: Option[String]

  override def toString(): String = fileName + ":" + line + ":" + column

  // var parent: Option[SourceContext] = None
  // def update(context: SourceContext): SourceContext
  // def receiver: Option[String]
  // def allContexts: List[List[(String, Int)]]
}

object SourceContext {

  implicit def _sc: SourceContext = macro SourceContextMacro.impl

  def apply(path: String, fileName: String, line: Int, column: Int, methodName: String, assignedVariable: Option[String]): SourceContext = 
    new ConcreteSourceContext(path, fileName, line, column, methodName, assignedVariable)

  private class ConcreteSourceContext(val path: String, val fileName: String, val line: Int, val column: Int, val methodName: String, val assignedVariable: Option[String]) extends SourceContext
}

//using the available information from the macro Context, rebuild the SourceContext previously generated by the compiler
private object SourceContextMacro {
  def impl(c: Context): c.Expr[SourceContext] = {
    import c.universe._
    val pos = c.enclosingPosition
    val path = pos.source.path
    val filename = pos.source.file.name
    val line = pos.line
    val column = pos.column
    val methodName = c.macroApplication.symbol.name.toString //"<unknown>" //c.internal.enclosingOwner.name.toString
    val assignedVariable = Some(c.enclosingDef.name.toString)
    c.Expr(q"SourceContext($path, $filename, $line, $column, $methodName, $assignedVariable)")
  }
}
